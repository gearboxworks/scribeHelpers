// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package helperSystem

import "reflect"

var Types = map[string]reflect.Type{
	"Environment": reflect.TypeOf((*Environment)(nil)).Elem(),
	"HelperProcess": reflect.TypeOf((*HelperProcess)(nil)).Elem(),
	"HelperProcesses": reflect.TypeOf((*HelperProcesses)(nil)).Elem(),
	"HelperSystem": reflect.TypeOf((*HelperSystem)(nil)).Elem(),
	"ProcessGetter": reflect.TypeOf((*ProcessGetter)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"SystemGetter": reflect.TypeOf((*SystemGetter)(nil)).Elem(),
	"TypeOpenFiles": reflect.TypeOf((*TypeOpenFiles)(nil)).Elem(),
	"TypeProcess": reflect.TypeOf((*TypeProcess)(nil)).Elem(),
	"TypeProcesses": reflect.TypeOf((*TypeProcesses)(nil)).Elem(),
	"TypeSystem": reflect.TypeOf((*TypeSystem)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"GetEnv": reflect.ValueOf(GetEnv),
	"HelperFindProcByName": reflect.ValueOf(HelperFindProcByName),
	"HelperFindProcByPid": reflect.ValueOf(HelperFindProcByPid),
	"HelperNewSystem": reflect.ValueOf(HelperNewSystem),
	"New": reflect.ValueOf(New),
	"NewOpenFiles": reflect.ValueOf(NewOpenFiles),
	"NewProcess": reflect.ValueOf(NewProcess),
	"NewProcesses": reflect.ValueOf(NewProcesses),
	"PrintEnv": reflect.ValueOf(PrintEnv),
	"ReflectHelperProcess": reflect.ValueOf(ReflectHelperProcess),
	"ReflectHelperSystem": reflect.ValueOf(ReflectHelperSystem),
}

var Variables = map[string]reflect.Value{
	"GetHelpers": reflect.ValueOf(&GetHelpers),
}

var Consts = map[string]reflect.Value{
	"HelperPrefix": reflect.ValueOf(HelperPrefix),
	"OnlyOnce": reflect.ValueOf(OnlyOnce),
}

