// Code generated by github.com/gearboxworks/buildtool DO NOT EDIT.

package ux

import "reflect"

var Types = map[string]reflect.Type{
	"Callers": reflect.TypeOf((*Callers)(nil)).Elem(),
	"ResponseGetter": reflect.TypeOf((*ResponseGetter)(nil)).Elem(),
	"RuntimeDebug": reflect.TypeOf((*RuntimeDebug)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"StateGetter": reflect.TypeOf((*StateGetter)(nil)).Elem(),
	"TypeReflect": reflect.TypeOf((*TypeReflect)(nil)).Elem(),
	"TypeResponse": reflect.TypeOf((*TypeResponse)(nil)).Elem(),
	"Ux": reflect.TypeOf((*Ux)(nil)).Elem(),
	"UxGetter": reflect.TypeOf((*UxGetter)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"Close": reflect.ValueOf(Close),
	"CreateTemplate": reflect.ValueOf(CreateTemplate),
	"DisableColours": reflect.ValueOf(DisableColours),
	"EnableColours": reflect.ValueOf(EnableColours),
	"EnsureStateNotNil": reflect.ValueOf(EnsureStateNotNil),
	"Exit": reflect.ValueOf(Exit),
	"GetCallers": reflect.ValueOf(GetCallers),
	"GetTerminalSize": reflect.ValueOf(GetTerminalSize),
	"IfNilReturnError": reflect.ValueOf(IfNilReturnError),
	"IsInterfaceNil": reflect.ValueOf(IsInterfaceNil),
	"IsReflectArray": reflect.ValueOf(IsReflectArray),
	"IsReflectBool": reflect.ValueOf(IsReflectBool),
	"IsReflectByteArray": reflect.ValueOf(IsReflectByteArray),
	"IsReflectFloat": reflect.ValueOf(IsReflectFloat),
	"IsReflectInt": reflect.ValueOf(IsReflectInt),
	"IsReflectMap": reflect.ValueOf(IsReflectMap),
	"IsReflectSlice": reflect.ValueOf(IsReflectSlice),
	"IsReflectString": reflect.ValueOf(IsReflectString),
	"IsReflectUint": reflect.ValueOf(IsReflectUint),
	"LoadFuncs": reflect.ValueOf(LoadFuncs),
	"NewResponse": reflect.ValueOf(NewResponse),
	"NewState": reflect.ValueOf(NewState),
	"Open": reflect.ValueOf(Open),
	"Panic": reflect.ValueOf(Panic),
	"PanicDump": reflect.ValueOf(PanicDump),
	"PrintError": reflect.ValueOf(PrintError),
	"Printf": reflect.ValueOf(Printf),
	"PrintfBlue": reflect.ValueOf(PrintfBlue),
	"PrintfCyan": reflect.ValueOf(PrintfCyan),
	"PrintfDebug": reflect.ValueOf(PrintfDebug),
	"PrintfError": reflect.ValueOf(PrintfError),
	"PrintfGreen": reflect.ValueOf(PrintfGreen),
	"PrintfInfo": reflect.ValueOf(PrintfInfo),
	"PrintfMagenta": reflect.ValueOf(PrintfMagenta),
	"PrintfNormal": reflect.ValueOf(PrintfNormal),
	"PrintfOk": reflect.ValueOf(PrintfOk),
	"PrintfRed": reflect.ValueOf(PrintfRed),
	"PrintfWarning": reflect.ValueOf(PrintfWarning),
	"PrintfWhite": reflect.ValueOf(PrintfWhite),
	"PrintfYellow": reflect.ValueOf(PrintfYellow),
	"PrintflnBlue": reflect.ValueOf(PrintflnBlue),
	"PrintflnCyan": reflect.ValueOf(PrintflnCyan),
	"PrintflnError": reflect.ValueOf(PrintflnError),
	"PrintflnGreen": reflect.ValueOf(PrintflnGreen),
	"PrintflnInfo": reflect.ValueOf(PrintflnInfo),
	"PrintflnMagenta": reflect.ValueOf(PrintflnMagenta),
	"PrintflnNormal": reflect.ValueOf(PrintflnNormal),
	"PrintflnOk": reflect.ValueOf(PrintflnOk),
	"PrintflnRed": reflect.ValueOf(PrintflnRed),
	"PrintflnWarning": reflect.ValueOf(PrintflnWarning),
	"PrintflnWhite": reflect.ValueOf(PrintflnWhite),
	"PrintflnYellow": reflect.ValueOf(PrintflnYellow),
	"ReflectBool": reflect.ValueOf(ReflectBool),
	"ReflectBoolArg": reflect.ValueOf(ReflectBoolArg),
	"ReflectByteArray": reflect.ValueOf(ReflectByteArray),
	"ReflectFloat": reflect.ValueOf(ReflectFloat),
	"ReflectInt": reflect.ValueOf(ReflectInt),
	"ReflectString": reflect.ValueOf(ReflectString),
	"ReflectStringArray": reflect.ValueOf(ReflectStringArray),
	"ReflectUint": reflect.ValueOf(ReflectUint),
	"SearchStructureForUxState": reflect.ValueOf(SearchStructureForUxState),
	"SprintError": reflect.ValueOf(SprintError),
	"Sprintf": reflect.ValueOf(Sprintf),
	"SprintfBlue": reflect.ValueOf(SprintfBlue),
	"SprintfCyan": reflect.ValueOf(SprintfCyan),
	"SprintfDebug": reflect.ValueOf(SprintfDebug),
	"SprintfError": reflect.ValueOf(SprintfError),
	"SprintfGreen": reflect.ValueOf(SprintfGreen),
	"SprintfInfo": reflect.ValueOf(SprintfInfo),
	"SprintfMagenta": reflect.ValueOf(SprintfMagenta),
	"SprintfNormal": reflect.ValueOf(SprintfNormal),
	"SprintfOk": reflect.ValueOf(SprintfOk),
	"SprintfRed": reflect.ValueOf(SprintfRed),
	"SprintfWarning": reflect.ValueOf(SprintfWarning),
	"SprintfWhite": reflect.ValueOf(SprintfWhite),
	"SprintfYellow": reflect.ValueOf(SprintfYellow),
	"StatePanic": reflect.ValueOf(StatePanic),
	"TemplatePrintf": reflect.ValueOf(TemplatePrintf),
	"TemplateSprintf": reflect.ValueOf(TemplateSprintf),
}

var Variables = map[string]reflect.Value{
}

var Consts = map[string]reflect.Value{
	"DefaultSeparator": reflect.ValueOf(DefaultSeparator),
	"PanicErrorGivenANilFunction": reflect.ValueOf(PanicErrorGivenANilFunction),
	"PanicErrorNotGivenAPointer": reflect.ValueOf(PanicErrorNotGivenAPointer),
	"PanicErrorPrefix": reflect.ValueOf(PanicErrorPrefix),
	"StateCreated": reflect.ValueOf(StateCreated),
	"StateDead": reflect.ValueOf(StateDead),
	"StateExited": reflect.ValueOf(StateExited),
	"StatePaused": reflect.ValueOf(StatePaused),
	"StateRemoving": reflect.ValueOf(StateRemoving),
	"StateRestarting": reflect.ValueOf(StateRestarting),
	"StateRunning": reflect.ValueOf(StateRunning),
	"StateUnknown": reflect.ValueOf(StateUnknown),
	"TypeBool": reflect.ValueOf(TypeBool),
	"TypeByte": reflect.ValueOf(TypeByte),
	"TypeByteArray": reflect.ValueOf(TypeByteArray),
	"TypeComplex128": reflect.ValueOf(TypeComplex128),
	"TypeComplex64": reflect.ValueOf(TypeComplex64),
	"TypeFloat32": reflect.ValueOf(TypeFloat32),
	"TypeFloat64": reflect.ValueOf(TypeFloat64),
	"TypeFunc": reflect.ValueOf(TypeFunc),
	"TypeFuncReturn": reflect.ValueOf(TypeFuncReturn),
	"TypeFuncVariadic": reflect.ValueOf(TypeFuncVariadic),
	"TypeFuncVariadicReturn": reflect.ValueOf(TypeFuncVariadicReturn),
	"TypeInt": reflect.ValueOf(TypeInt),
	"TypeInt16": reflect.ValueOf(TypeInt16),
	"TypeInt32": reflect.ValueOf(TypeInt32),
	"TypeInt64": reflect.ValueOf(TypeInt64),
	"TypeInt8": reflect.ValueOf(TypeInt8),
	"TypeInterface": reflect.ValueOf(TypeInterface),
	"TypeInterfaceArray": reflect.ValueOf(TypeInterfaceArray),
	"TypeInvalid": reflect.ValueOf(TypeInvalid),
	"TypeMap": reflect.ValueOf(TypeMap),
	"TypePtr": reflect.ValueOf(TypePtr),
	"TypeSlice": reflect.ValueOf(TypeSlice),
	"TypeString": reflect.ValueOf(TypeString),
	"TypeStringArray": reflect.ValueOf(TypeStringArray),
	"TypeStruct": reflect.ValueOf(TypeStruct),
	"TypeUint": reflect.ValueOf(TypeUint),
	"TypeUint16": reflect.ValueOf(TypeUint16),
	"TypeUint32": reflect.ValueOf(TypeUint32),
	"TypeUint64": reflect.ValueOf(TypeUint64),
	"TypeUint8": reflect.ValueOf(TypeUint8),
	"TypeUintptr": reflect.ValueOf(TypeUintptr),
}

