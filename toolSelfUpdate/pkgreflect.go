// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package toolSelfUpdate

import "reflect"

var Types = map[string]reflect.Type{
	"Example": reflect.TypeOf((*Example)(nil)).Elem(),
	"Examples": reflect.TypeOf((*Examples)(nil)).Elem(),
	"FlagValue": reflect.TypeOf((*FlagValue)(nil)).Elem(),
	"SelfUpdateArgs": reflect.TypeOf((*SelfUpdateArgs)(nil)).Elem(),
	"SelfUpdateGetter": reflect.TypeOf((*SelfUpdateGetter)(nil)).Elem(),
	"StringValue": reflect.TypeOf((*StringValue)(nil)).Elem(),
	"TargetFile": reflect.TypeOf((*TargetFile)(nil)).Elem(),
	"ToolSelfUpdate": reflect.TypeOf((*ToolSelfUpdate)(nil)).Elem(),
	"TypeSelfUpdate": reflect.TypeOf((*TypeSelfUpdate)(nil)).Elem(),
	"UrlValue": reflect.TypeOf((*UrlValue)(nil)).Elem(),
	"VersionValue": reflect.TypeOf((*VersionValue)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"CompareBinary": reflect.ValueOf(CompareBinary),
	"CopyFile": reflect.ValueOf(CopyFile),
	"FileStat": reflect.ValueOf(FileStat),
	"GetSemVer": reflect.ValueOf(GetSemVer),
	"New": reflect.ValueOf(New),
	"ReflectFlagValue": reflect.ValueOf(ReflectFlagValue),
	"ReflectStringValue": reflect.ValueOf(ReflectStringValue),
	"ReflectToolSelfUpdate": reflect.ValueOf(ReflectToolSelfUpdate),
	"ReflectVersionValue": reflect.ValueOf(ReflectVersionValue),
	"ResolveFile": reflect.ValueOf(ResolveFile),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"BootstrapBinaryName": reflect.ValueOf(BootstrapBinaryName),
	"CmdSelfUpdate": reflect.ValueOf(CmdSelfUpdate),
	"CmdVersion": reflect.ValueOf(CmdVersion),
	"CmdVersionCheck": reflect.ValueOf(CmdVersionCheck),
	"CmdVersionInfo": reflect.ValueOf(CmdVersionInfo),
	"CmdVersionLatest": reflect.ValueOf(CmdVersionLatest),
	"CmdVersionList": reflect.ValueOf(CmdVersionList),
	"CmdVersionUpdate": reflect.ValueOf(CmdVersionUpdate),
	"CurrentVersion": reflect.ValueOf(CurrentVersion),
	"DefaultRepoServer": reflect.ValueOf(DefaultRepoServer),
	"DefaultVersion": reflect.ValueOf(DefaultVersion),
	"EarliestSemVer": reflect.ValueOf(EarliestSemVer),
	"FlagVersion": reflect.ValueOf(FlagVersion),
	"LatestSemVer": reflect.ValueOf(LatestSemVer),
	"LatestVersion": reflect.ValueOf(LatestVersion),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

