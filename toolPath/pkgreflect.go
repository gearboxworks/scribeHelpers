// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package toolPath

import "reflect"

var Types = map[string]reflect.Type{
	"OsPathGetter": reflect.TypeOf((*OsPathGetter)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"ToolOsPath": reflect.TypeOf((*ToolOsPath)(nil)).Elem(),
	"TypeOsPath": reflect.TypeOf((*TypeOsPath)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"New": reflect.ValueOf(New),
	"ReflectAbsPath": reflect.ValueOf(ReflectAbsPath),
	"ReflectFileMode": reflect.ValueOf(ReflectFileMode),
	"ReflectPath": reflect.ValueOf(ReflectPath),
	"ReflectToolOsPath": reflect.ValueOf(ReflectToolOsPath),
	"ToolChdir": reflect.ValueOf(ToolChdir),
	"ToolChmod": reflect.ValueOf(ToolChmod),
	"ToolCreateDir": reflect.ValueOf(ToolCreateDir),
	"ToolGetCwd": reflect.ValueOf(ToolGetCwd),
	"ToolIsCwd": reflect.ValueOf(ToolIsCwd),
	"ToolNewPath": reflect.ValueOf(ToolNewPath),
	"ToolReadFile": reflect.ValueOf(ToolReadFile),
	"ToolRemoveDir": reflect.ValueOf(ToolRemoveDir),
	"ToolRemoveFile": reflect.ValueOf(ToolRemoveFile),
	"ToolWriteFile": reflect.ValueOf(ToolWriteFile),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"DefaultSeparator": reflect.ValueOf(DefaultSeparator),
	"onlyOnce": reflect.ValueOf(onlyOnce),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

