// Code generated by github.com/gearboxworks/buildtool DO NOT EDIT.

package toolGo

import "reflect"

var Types = map[string]reflect.Type{
	"GoFile": reflect.TypeOf((*GoFile)(nil)).Elem(),
	"GoFiles": reflect.TypeOf((*GoFiles)(nil)).Elem(),
	"GoGetter": reflect.TypeOf((*GoGetter)(nil)).Elem(),
	"GoMeta": reflect.TypeOf((*GoMeta)(nil)).Elem(),
	"Mode": reflect.TypeOf((*Mode)(nil)).Elem(),
	"Name": reflect.TypeOf((*Name)(nil)).Elem(),
	"Repo": reflect.TypeOf((*Repo)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"ToolGo": reflect.TypeOf((*ToolGo)(nil)).Elem(),
	"TypeGo": reflect.TypeOf((*TypeGo)(nil)).Elem(),
	"Version": reflect.TypeOf((*Version)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"AddTags": reflect.ValueOf(AddTags),
	"GetDefaultFile": reflect.ValueOf(GetDefaultFile),
	"Help": reflect.ValueOf(Help),
	"New": reflect.ValueOf(New),
	"NewGoFile": reflect.ValueOf(NewGoFile),
	"ParseGoFiles": reflect.ValueOf(ParseGoFiles),
	"ReflectState": reflect.ValueOf(ReflectState),
	"ReflectToolGo": reflect.ValueOf(ReflectToolGo),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"All": reflect.ValueOf(All),
	"AllErrors": reflect.ValueOf(AllErrors),
	"BinaryName": reflect.ValueOf(BinaryName),
	"BinaryRepo": reflect.ValueOf(BinaryRepo),
	"BinaryRepoName": reflect.ValueOf(BinaryRepoName),
	"BinaryRepoOwner": reflect.ValueOf(BinaryRepoOwner),
	"BinaryVersion": reflect.ValueOf(BinaryVersion),
	"DeclarationErrors": reflect.ValueOf(DeclarationErrors),
	"ImportsOnly": reflect.ValueOf(ImportsOnly),
	"PackageClauseOnly": reflect.ValueOf(PackageClauseOnly),
	"ParseComments": reflect.ValueOf(ParseComments),
	"SourceRepo": reflect.ValueOf(SourceRepo),
	"SourceRepoName": reflect.ValueOf(SourceRepoName),
	"SourceRepoOwner": reflect.ValueOf(SourceRepoOwner),
	"SpuriousErrors": reflect.ValueOf(SpuriousErrors),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
	"Trace": reflect.ValueOf(Trace),
}

