// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package toolGhr

import "reflect"

var Types = map[string]reflect.Type{
	"Asset": reflect.TypeOf((*Asset)(nil)).Elem(),
	"Commit": reflect.TypeOf((*Commit)(nil)).Elem(),
	"GhrGetter": reflect.TypeOf((*GhrGetter)(nil)).Elem(),
	"GithubError": reflect.TypeOf((*GithubError)(nil)).Elem(),
	"Release": reflect.TypeOf((*Release)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"Tag": reflect.TypeOf((*Tag)(nil)).Elem(),
	"ToolGhr": reflect.TypeOf((*ToolGhr)(nil)).Elem(),
	"TypeAuth": reflect.TypeOf((*TypeAuth)(nil)).Elem(),
	"TypeFile": reflect.TypeOf((*TypeFile)(nil)).Elem(),
	"TypeGhr": reflect.TypeOf((*TypeGhr)(nil)).Elem(),
	"TypeRepo": reflect.TypeOf((*TypeRepo)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"AddVersionPrefix": reflect.ValueOf(AddVersionPrefix),
	"CopyReleases": reflect.ValueOf(CopyReleases),
	"GetAsset": reflect.ValueOf(GetAsset),
	"Mark": reflect.ValueOf(Mark),
	"New": reflect.ValueOf(New),
	"NewAuth": reflect.ValueOf(NewAuth),
	"NewFile": reflect.ValueOf(NewFile),
	"NewRepo": reflect.ValueOf(NewRepo),
	"ReflectToolGhr": reflect.ValueOf(ReflectToolGhr),
	"ReleaseSync": reflect.ValueOf(ReleaseSync),
	"RemoveVersionPrefix": reflect.ValueOf(RemoveVersionPrefix),
	"Tomessage": reflect.ValueOf(Tomessage),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"AssetUri": reflect.ValueOf(AssetUri),
	"DefaultGitHubApiUrl": reflect.ValueOf(DefaultGitHubApiUrl),
	"DefaultGitHubUrl": reflect.ValueOf(DefaultGitHubUrl),
	"Latest": reflect.ValueOf(Latest),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

