// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package toolGit

import "reflect"

var Types = map[string]reflect.Type{
	"CloneOptions": reflect.TypeOf((*CloneOptions)(nil)).Elem(),
	"Dir": reflect.TypeOf((*Dir)(nil)).Elem(),
	"Filepath": reflect.TypeOf((*Filepath)(nil)).Elem(),
	"Filepaths": reflect.TypeOf((*Filepaths)(nil)).Elem(),
	"LogOptions": reflect.TypeOf((*LogOptions)(nil)).Elem(),
	"PullOptions": reflect.TypeOf((*PullOptions)(nil)).Elem(),
	"ReadableName": reflect.TypeOf((*ReadableName)(nil)).Elem(),
	"Reference": reflect.TypeOf((*Reference)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"Status": reflect.TypeOf((*Status)(nil)).Elem(),
	"Tag": reflect.TypeOf((*Tag)(nil)).Elem(),
	"Tagname": reflect.TypeOf((*Tagname)(nil)).Elem(),
	"ToolGit": reflect.TypeOf((*ToolGit)(nil)).Elem(),
	"TypeExecCommand": reflect.TypeOf((*TypeExecCommand)(nil)).Elem(),
	"TypeGit": reflect.TypeOf((*TypeGit)(nil)).Elem(),
	"Url": reflect.TypeOf((*Url)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"GitClone": reflect.ValueOf(GitClone),
	"GitOpen": reflect.ValueOf(GitOpen),
	"New": reflect.ValueOf(New),
	"ReflectToolGit": reflect.ValueOf(ReflectToolGit),
	"ToolNewGit": reflect.ValueOf(ToolNewGit),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"LockMsg": reflect.ValueOf(LockMsg),
	"LockTag": reflect.ValueOf(LockTag),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

