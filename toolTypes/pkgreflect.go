// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package toolTypes

import "reflect"

var Types = map[string]reflect.Type{
	"TypeGenericString": reflect.TypeOf((*TypeGenericString)(nil)).Elem(),
	"TypeGenericStringArray": reflect.TypeOf((*TypeGenericStringArray)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"ReflectBool": reflect.ValueOf(ReflectBool),
	"ReflectBoolArg": reflect.ValueOf(ReflectBoolArg),
	"ReflectByteArray": reflect.ValueOf(ReflectByteArray),
	"ReflectFloat": reflect.ValueOf(ReflectFloat),
	"ReflectInt": reflect.ValueOf(ReflectInt),
	"ReflectInt32": reflect.ValueOf(ReflectInt32),
	"ReflectString": reflect.ValueOf(ReflectString),
	"ReflectStrings": reflect.ValueOf(ReflectStrings),
	"ToolContains": reflect.ValueOf(ToolContains),
	"ToolFindInMap": reflect.ValueOf(ToolFindInMap),
	"ToolGrep": reflect.ValueOf(ToolGrep),
	"ToolGrepArray": reflect.ValueOf(ToolGrepArray),
	"ToolIsArray": reflect.ValueOf(ToolIsArray),
	"ToolIsInt": reflect.ValueOf(ToolIsInt),
	"ToolIsMap": reflect.ValueOf(ToolIsMap),
	"ToolIsSlice": reflect.ValueOf(ToolIsSlice),
	"ToolIsString": reflect.ValueOf(ToolIsString),
	"ToolSprintf": reflect.ValueOf(ToolSprintf),
	"ToolToLower": reflect.ValueOf(ToolToLower),
	"ToolToString": reflect.ValueOf(ToolToString),
	"ToolToUpper": reflect.ValueOf(ToolToUpper),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"OnlyOnce": reflect.ValueOf(OnlyOnce),
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

