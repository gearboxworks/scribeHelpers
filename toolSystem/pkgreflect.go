// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package toolSystem

import "reflect"

var Types = map[string]reflect.Type{
	"Environment": reflect.TypeOf((*Environment)(nil)).Elem(),
	"ProcessGetter": reflect.TypeOf((*ProcessGetter)(nil)).Elem(),
	"State": reflect.TypeOf((*State)(nil)).Elem(),
	"SystemGetter": reflect.TypeOf((*SystemGetter)(nil)).Elem(),
	"ToolProcess": reflect.TypeOf((*ToolProcess)(nil)).Elem(),
	"ToolProcesses": reflect.TypeOf((*ToolProcesses)(nil)).Elem(),
	"ToolSystem": reflect.TypeOf((*ToolSystem)(nil)).Elem(),
	"TypeOpenFiles": reflect.TypeOf((*TypeOpenFiles)(nil)).Elem(),
	"TypeProcess": reflect.TypeOf((*TypeProcess)(nil)).Elem(),
	"TypeProcesses": reflect.TypeOf((*TypeProcesses)(nil)).Elem(),
	"TypeSystem": reflect.TypeOf((*TypeSystem)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"GetEnv": reflect.ValueOf(GetEnv),
	"New": reflect.ValueOf(New),
	"NewOpenFiles": reflect.ValueOf(NewOpenFiles),
	"NewProcess": reflect.ValueOf(NewProcess),
	"NewProcesses": reflect.ValueOf(NewProcesses),
	"PrintEnv": reflect.ValueOf(PrintEnv),
	"ReflectToolProcess": reflect.ValueOf(ReflectToolProcess),
	"ReflectToolSystem": reflect.ValueOf(ReflectToolSystem),
	"ToolFindProcByName": reflect.ValueOf(ToolFindProcByName),
	"ToolFindProcByPid": reflect.ValueOf(ToolFindProcByPid),
	"ToolNewSystem": reflect.ValueOf(ToolNewSystem),
}

var Variables = map[string]reflect.Value{
	"GetTools": reflect.ValueOf(&GetTools),
}

var Consts = map[string]reflect.Value{
	"ToolPrefix": reflect.ValueOf(ToolPrefix),
}

