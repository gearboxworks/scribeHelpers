// Code generated by github.com/newclarity/PackageReflect DO NOT EDIT.

package global

import "reflect"

var Types = map[string]reflect.Type{
	"Content": reflect.TypeOf((*Content)(nil)).Elem(),
	"Dir": reflect.TypeOf((*Dir)(nil)).Elem(),
	"Domain": reflect.TypeOf((*Domain)(nil)).Elem(),
	"ElemsType": reflect.TypeOf((*ElemsType)(nil)).Elem(),
	"ElemsTypeIndex": reflect.TypeOf((*ElemsTypeIndex)(nil)).Elem(),
	"Entry": reflect.TypeOf((*Entry)(nil)).Elem(),
	"Filename": reflect.TypeOf((*Filename)(nil)).Elem(),
	"Filepath": reflect.TypeOf((*Filepath)(nil)).Elem(),
	"Filepaths": reflect.TypeOf((*Filepaths)(nil)).Elem(),
	"Fragment": reflect.TypeOf((*Fragment)(nil)).Elem(),
	"HtmlElement": reflect.TypeOf((*HtmlElement)(nil)).Elem(),
	"HtmlName": reflect.TypeOf((*HtmlName)(nil)).Elem(),
	"Index": reflect.TypeOf((*Index)(nil)).Elem(),
	"LookupIndex": reflect.TypeOf((*LookupIndex)(nil)).Elem(),
	"LookupMap": reflect.TypeOf((*LookupMap)(nil)).Elem(),
	"Map": reflect.TypeOf((*Map)(nil)).Elem(),
	"Name": reflect.TypeOf((*Name)(nil)).Elem(),
	"Object": reflect.TypeOf((*Object)(nil)).Elem(),
	"ObjectMap": reflect.TypeOf((*ObjectMap)(nil)).Elem(),
	"Path": reflect.TypeOf((*Path)(nil)).Elem(),
	"Port": reflect.TypeOf((*Port)(nil)).Elem(),
	"Protocol": reflect.TypeOf((*Protocol)(nil)).Elem(),
	"Sql": reflect.TypeOf((*Sql)(nil)).Elem(),
	"StringMap": reflect.TypeOf((*StringMap)(nil)).Elem(),
	"Strings": reflect.TypeOf((*Strings)(nil)).Elem(),
	"Tablename": reflect.TypeOf((*Tablename)(nil)).Elem(),
	"UnixTime": reflect.TypeOf((*UnixTime)(nil)).Elem(),
	"Url": reflect.TypeOf((*Url)(nil)).Elem(),
	"UrlPath": reflect.TypeOf((*UrlPath)(nil)).Elem(),
	"UrlPaths": reflect.TypeOf((*UrlPaths)(nil)).Elem(),
	"Urls": reflect.TypeOf((*Urls)(nil)).Elem(),
	"ValueType": reflect.TypeOf((*ValueType)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
}

var Variables = map[string]reflect.Value{
	"NoCache": reflect.ValueOf(&NoCache),
}

var Consts = map[string]reflect.Value{
	"AppName": reflect.ValueOf(AppName),
	"CollectElemsType": reflect.ValueOf(CollectElemsType),
	"HttpScheme": reflect.ValueOf(HttpScheme),
	"HttpsScheme": reflect.ValueOf(HttpsScheme),
	"IgnoreElemsType": reflect.ValueOf(IgnoreElemsType),
	"LinkElemsType": reflect.ValueOf(LinkElemsType),
	"MetaContent": reflect.ValueOf(MetaContent),
	"MetaElemsType": reflect.ValueOf(MetaElemsType),
	"MetaName": reflect.ValueOf(MetaName),
	"MetaValue": reflect.ValueOf(MetaValue),
	"NameValue": reflect.ValueOf(NameValue),
	"RelValue": reflect.ValueOf(RelValue),
}

